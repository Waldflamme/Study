import abc  # Импортируем модуль для создания абстрактных базовых классов


# 1. Создаем абстрактный продукт (Document).
# Создаем абстрактный базовый класс, предоставляющий обобщенные интерфейсы для работы с объектами
# будущих дочерних классов, предстваляющих собой конечные продукты доступные пользователю
# (продукты доступные пользователю в рамках реализации клиентского кода)
# Рассмторим код, предоставляющи возможность открытия документов разного типа и их сохранения
class Document(abc.ABC): # Создание базового класса, определяющего методы будущих продуктов, доступных пользователю
    @abc.abstractmethod # Декоратор для создания абстрактного метода
    # Абстрактный метод для открытия документа
    def open(self):
        """Открыть документ"""
        pass # Конкретный функционал для каждого метода будет представлен в коде конкретного продукта

    @abc.abstractmethod
    # Абстрактный метод сохранения документов
    def save(self):
        """Сохранить документ"""
        pass


# 2. Конкретные продукты (реализация разных типов документов)
# Далее реализуем конкретные продукты с конкретными методами, в основе которых лежит базовый класс, созданный ранее.
# В каждом классе конечного продукта есть свои варианты реализации методов из базового класса.
class TextDocument(Document):
    def open(self): # Метод открытия для конкретного продукта (документа)
        return "Открыт текстовый документ (.txt)."

    def save(self): # Метод сохранения конкретного продукта (документа)
        return "Сохранён текстовый документ."


class ImageDocument(Document):
    def open(self):
        return "Открыто изображение (.jpg/.png)."

    def save(self):
        return "Сохранено изображение."


class PDFDocument(Document):
    def open(self):
        return "Открыт PDF-документ (.pdf)."

    def save(self):
        return "Сохранён PDF-документ."


# 3. Фабрика документов. Создаем класс, в нашем случае представляющий интерфейс
# для создания конечного продукта (документа) необходимого клиенту.
class DocumentFactory:
    def create_document(self, doc_type: str) -> Document: # Данная строка
        # дает уточнение, что на вход функции принимаются данные с типом str, а на
        # выходе ожидается объект абстрактного класса Document, а точнее его дочерних классов
        if doc_type == "text": # Реализация ввода различных типов документов через str и
            # получения объекта соответсвующего класса
            return TextDocument()
        elif doc_type == "image":
            return ImageDocument()
        elif doc_type == "pdf":
            return PDFDocument()
        else:
            raise ValueError(f"Неизвестный тип документа: {doc_type}")


# 4. Демонстрация работы. Далее представлен код, дающий представление о том, как клиент
# будет взаимодействовать с программой
factory = DocumentFactory() # Создаем новую переменную для удобства работы с фабрикой

# Создаем список, содержащий конечные продукты (документы) разных типов
docs = [
        factory.create_document("text"),
        factory.create_document("image"),
        factory.create_document("pdf"),
    ]

# Демонстрация работы абстрактных методов с полученными конечными продуктами (документами)
for doc in docs:
        print(doc.open())
        print(doc.save())
        print("-" * 40)

# Демонстрация работы в случае попытки работы с конечным продуктом, который не реализован
# в основном коде
docs = [factory.create_document("csv")]

for doc in docs:
    print(doc.open())
    print(doc.save())
    print("-" * 40)
